apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'



allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.android.example.github.testing.OpenClass'
}
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.chargingwatts.batteryalarm"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        multiDexEnabled true
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        testInstrumentationRunner "com.android.example.github.util.GithubTestRunner"

    }
    buildTypes {
        debug {
            debuggable = true
//            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "fees"

    productFlavors {

        free {
            dimension "fees"
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
//            resValue "string", "app_name", "Otex Opm Dev"
        }

        paid {
            dimension "fees"
            applicationIdSuffix ".paid"
            versionNameSuffix "-paid"
//            resValue "string", "app_name", "Otex Opm Test"

        }

    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
//        androidTest.java.srcDirs += "src/test-common/java"
//        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
//        lintConfig rootProject.file('lint.xml')
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation 'androidx.core:core:1.1.0-alpha01'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha01'
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui
    implementation deps.navigation.ui_ktx

    implementation 'androidx.room:room-runtime:2.1.0-alpha02'
    implementation 'androidx.lifecycle:lifecycle-runtime:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.0.0'
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.glide.runtime

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.reflect

    implementation deps.work.runtime
    implementation deps.work.firebase
    implementation deps.work.runtime_ktx

    implementation deps.timber
    implementation deps.firebase.core
    implementation deps.crashlytics.sdk
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    kapt 'androidx.room:room-compiler:2.1.0-alpha02'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    implementation 'androidx.preference:preference:1.0.0'
//    testImplementation deps.junit
//    testImplementation deps.mock_web_server
//    testImplementation(deps.arch_core.testing, {
//        exclude group: 'com.android.support', module: 'support-compat'
//        exclude group: 'com.android.support', module: 'support-annotations'
//        exclude group: 'com.android.support', module: 'support-core-utils'
//    })
//    testImplementation deps.mockito.core
//
//    androidTestImplementation deps.navigation.testing_ktx
//    androidTestImplementation deps.support.app_compat
//    androidTestImplementation deps.support.recyclerview
//    androidTestImplementation deps.support.cardview
//    androidTestImplementation deps.support.design
//
//    androidTestImplementation(deps.espresso.core, {
//        exclude group: 'com.android.support', module: 'support-annotations'
//        exclude group: 'com.google.code.findbugs', module: 'jsr305'
//    })
//    androidTestImplementation(deps.espresso.contrib, {
//        exclude group: 'com.android.support', module: 'support-annotations'
//        exclude group: 'com.google.code.findbugs', module: 'jsr305'
//    })
//
//    androidTestImplementation(deps.arch_core.testing, {
//    })
//    androidTestImplementation deps.dexmaker
//    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
}
repositories {
    mavenCentral()
}

//task fullCoverageReport(type: JacocoReport) {
//    dependsOn 'createDebugCoverageReport'
//    dependsOn 'testDebugUnitTest'
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
//                      '**/*Test*.*', 'android/**/*.*',
//                      '**/*_MembersInjector.class',
//                      '**/Dagger*Component.class',
//                      '**/Dagger*Component$Builder.class',
//                      '**/*_*Factory.class',
//                      '**/*ComponentImpl.class',
//                      '**/*SubComponentBuilder.class']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ])
//}
//
//// we need all open to run tests which  a we enable only for debug builds.
//project.tasks.whenTaskAdded {
//    if (it.name == "testReleaseUnitTest") {
//        it.enabled = false
//    }
//}

